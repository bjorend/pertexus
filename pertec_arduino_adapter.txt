                        Pertec Arduino Adapter
                             Bjoren Davis
                             May 7, 2022

 * References:
 *  [1] Technical Service Manual for Qualstar Phase Encoded
 *      Streaming Tape Transports
 *      P/N 500150 Rev. B 5/14/90
 *      Qualstar Corporation, 9621 Irondale Avenue, Chatsworth, CA  91311
 *      https://bitsavers.org/pdf/qualstar/500150B_1052serviceMan.pdf
 *  [2] Pertec 9-Track Tape Interface
 *      Information courtesty [sic] of John Wilson
 *      https://sydex.com/pertec.html
 *  [3] i.MX RT1060 Processor Reference Manual
 *      Document Number: IMXRT1060RM
 *      Rev. 3, 07/2021
 *      NXP Semiconductors
 *      https://www.pjrc.com/teensy/IMXRT1060RM_rev3.pdf
 *  [4] SIMH Magtape Representation and Handling
 *      Bob Supnik, 30 Aug 06
 *      http://simh.trailing-edge.com/docs/simh_magtape.pdf
 *  [5] Schematic for Teensy 4.1
 *      https://www.pjrc.com/teensy/schematic41.png
 *  [6] Pinouts for Teensy 4.1
 *      Front: https://www.pjrc.com/teensy/card11a_rev4_web.pdf
 *      Back: https://www.pjrc.com/teensy/card11b_rev4_web.pdf
 *  [7] PCA9535; PCA9535C
 *      16-bit I2C-bus and SMBus, low power I/O port with interrupt
 *      Product data sheet
 *      Rev. 6 - 7 November 2017
 *      Document identifier: PCA9535_PCA9535C
 *      NXP Semiconductors
 *      https://www.nxp.com/docs/en/data-sheet/PCA9535_PCA9535C.pdf

May 7, 2022
-----------

I've been trying to build a Pertec tape controller adapter for some
time now.

I started out building a hand-wired adapter that uses an Arduino Mega
R3 2560 to connect directly to the 2 x 50-pin Pertec connectors.

It works alright.  The problem is that the CPU is just too slow and
the SD card access can't quite keep up with the data rate from my
Qualstar (about 80 kBps) with some record-sizes.  It also can't keep
up with the interrupt rate if I wanted to both write and
simultaneously read back.  Finally, it has vastly too little buffering
(8 KiB, of which I can only use 4 KiB because I need the ring buffer
arithmetic to be fast).

In addition, I'd like the following additional features:
    + read-after-write data validation for those drives that support
      it.
    + support for drives moving up to 150 ips and 6250 bps (that's
      actually 9042 bpi giving about 1.4 MBps)
    + ability to handle differing directions of non-standard signals
      (ISGL/SPCMD1)
    + ability to buffer at least 2 full records at maximum of 65536
      bytes (so a minimum of at least 128 KB of RAM)
    + ability to do high speed reads/writes to SD card
    + ability to implement a USB UASP (USB Attached SCSI Protocol)
      SCSI-type tape device using SCSI-2 SSC
    + ability to implement an iSCSI-type tape device over Ethernet
      using SCSI-2 SSC

So let's look at some possible platforms:
    + Arduino Mega R3 2560
        + $42.40/each, currently available
        + 16 MHz AVR 8-bit CPU
        + 8 KiB RAM, 256 KiB flash (program text size is usually
          limited to 64 KiB)
        + 5V native I/O
        + USB is implemented via a serial link to another chip.  This
          rules out the UASP link
        + only 8 KiB of RAM rules out buffering full records
        + SD interface is SPI-only (no SDIO)
        + the CPU is too slow to handle reading a tape and writing to
          the SD card
        + enough GPIOs to connect to everything on the Pertec
          interface
        + downsides:
            + slow
            + very little RAM
            + no native USB
            + no Ethernet?
            + 3.3V needs level shifters
            + no realtime clock? (file create dates are garbage)
            + SD slot is not on board -- need extra board
    + Adafruit Metro M4 Grand Central
        + $39.95/each, currently unavailable
        + 120 MHz ARM Cortex M4
        + 256 KiB RAM, 1 MiB flash
        + 3.3V native I/O -- needs level shifters
        + enough GPIOs to connect to everything on the Pertec
          interface
        + SD interface is SPI-only (no SDIO)
        + CPU is much more powerful than the Arduino Mega R3 2560
        + native USB
        + downsides:
            + unavailable
            + no Ethernet?
            + no SDIO
            + 3.3V needs level shifters
            + no realtime clock? (file create dates are garbage)
    + pjrc Teensy 4.1
        + $26.85/each (no pins), available
        + $30.85/each (with pins), not available
        + 600 MHz ARM Cortex M7
        + 1 MiB RAM, 7.9 MiB flash
        + possibility for QSPI-based RAM
        + 3.3V only -- needs level shifters
        + native Ethernet with PHY on board
        + native USB
        + downsides:
            + 3.3V requires level shifters
            + insufficient GPIOs to handle entire interface

So I chose the Teensy 4.1.  The I/O mapping is really complicated.
There are some components (the "cross bar") that I really don't
understand.

But it appears each "pad" (pin) has between 1 and up to 8 different
possible functions.

I want to design a daughterboard with the following:
    + a 16-port I2C GPIO "expander" (and possibly level shifter)
    + level shifters
    + "terminators" (SIP sockets for 220/330 terminators)
    + Ethernet RJ45
    + CR2032 clip to provide power to keep

Another thing I wanted to do was determine what devices are already in
use on the board.  The CPU is an MIMXRT1062DVJ6B.

On-board devices in use:
    + USB: USB_OTG1
    + Boot: SRC_BOOT_MODE[0], JTAG (SRC_BOOT_MODE[1] pulled to ground)
    + Main flash: FLEXSPI_A
    + SD card: USDHC1
    + Ethernet: ENET
    + PSRAM/FLASH (unpopulated): FLEXSPI2_A (PSRAM=SS0_B, FLASH=SS1_B)

Next I need to start assigning I/Os.  First I need to find:
    + an I2C connection for my port expander
    + a contiguous set of bits for my read data
    + a contiguous set of bits for my write data

I put the "Mux" table into my spreadsheet to ease in my analysis.

If I don't consider using FLEXIO for my I2C, and I want to reserve 2
8-bit contiguous blocks of bits for read and write data, I am left
with only this choice:
    + LPI2C4_SCL = GPIO_AD_B0_12 (J5:16)
    + LPI2C4_SDA = GPIO_AD_B0_13 (J5:17)
That leaves GPIO_AD_B1_00..GPIO_AD_B1_15 available for use as the read
and write data.  These are all on pins on J4 and J5.  They are all
contiguous GPIOs and they are FLEXIO3_D00..FLEXIO3_D15, so I *might*
be able to construct a data movement machine with the FLEXIO block
(though I doubt I'll need to).


May 8, 2022
-----------

I'm using the Adafruit "GPIO Bonnet"
(https://www.adafruit.com/product/4132) as a basis for a
level-translating expander design.  I won't use the same chip
(MCP23017ML) because it's not currently available.  But there are
other equivalent chips available.


May 11, 2022
------------

I'm beginning to make chip/pin assignments.

May 18, 2022
------------

I've *finally* got a completed schematic, and I've started the layout.  Ugh.

May 19, 2022
------------

I want to generalize the board to act either as a controller or a
peripheral.

I have 3 available 3.3V logic signals to use.  Here are the modes:

    + controller active.  We're listening on inputs and driving outputs.
    + controller inactive.  We don't really care about inputs because
      we're the controller.  We'd only assume this mode to let another
      controller take over.
    + analyzer.  All lines are inputs.
    + peripheral inactive.  We're listening on inputs but not driving
      outputs.
    + peripheral active.  We've been selected by a controller and
      we're responding.  We're listening on inputs and driving outputs.

We'll group the Pertec signals as
    + Group A: inputs to controller, outputs from peripheral.
        IFBY, IR2, IR3, IRP, IR0, IR1, ILDP, IR4, IR7, IR6, IHER,
        IFMK, IDENT, IR5, IEOT, INRZ, IRDY, IRWD, IFPT, IRSTR, IWSTR,
        IDBY, ISPEED, ICER, IONL
    + Group B: outputs from controller, inputs to peripheral.
        ILWD, IW4, IGO, IW0, IW1, ISGL, ILOL, IREV, IREW, IWP, IW7,
        IW3, IW6, IW2, IW5, IWRT, IRTH2, IEDIT, IERASE, IWFM, IRTH1,
        ITAD0, IFEN, IOFL, ITAD1, IFAD, IDEN

    Mode                    DIRA  OEA   DIRB    Group A         Group B
    controller active       L     L     H       input           output
    controller inactive     L     L     L       don't care      don't care
    analyzer                L     L     L       input           input
    peripheral inactive     H     H     L       don't care      input
    peripheral active       H     L     L       output          input

Group B signals always have OE enabled because the transition from
undriven to driven (input to output) happens only rarely -- it's not
a change that happens during normal operation.

For a peripheral, however, enabling/disabling the output of its output
signals (group A signals) happens during operation.

Actually, Group A should be further subdivided into A0 and A1
    + Group A0 (OE = nSTATENA):
        IRWD, IFPT, ISPEED, IONL
    + Group A1 (OE = nONLSEL):
        IFBY, IR2, IR3, IRP, IR0, IR1, ILDP, IR4, IR7, IR6, IHER,
        IFMK, IDENT, IR5, IEOT, INRZ, IRDY, IRSTR, IWSTR,
        IDBY, ICER

Happily all of Group A0 lines are on the fully-controllable PCA9353DBR

May 22, 2022
------------

Last night I taped out bdb004 "Pertexus" Revision 1.  I ordered 3
boards from OSH park and a bottom SMD stencil from OSH stencils.  I
also put together and ordered 3 kits worth of parts from Digikey.

Today I realized I didn't put any mounting holes into the thing.

This morning I drew up Revision A1 with holes for M4 screws.  I used
the "ISO 14580" version of the hole -- a cap-head screw -- because it
has a smaller keepout area.

I didn't move anything except RN4 and some traces near RN4 and near
pin 1 of RN1.

This means that I don't have to reorder the stencil, hopefully.


June 4, 2022
------------

Yesterday I got my PCBs and I built one up.

Some issues/things to work on with the PCB:
    + The 50-pin latched connectors have levers that are a little too
      short for the IDC female headers I have on my cable.
    + It would be easier to place the resistors/capacitors if they
      were all aligned the same way.
    + I should have grouped the I/Os on the PCA9535 with all group A
      signals on one port and all group B signals on the other.  By
      doing that I could simplify the interrupt handling to only read
      one of the two ports.
    + I forgot to put a serial number location on the board.
    + It would have been nice to add some shunts so I could measure
      the current consumption (the board is getting quite warm).
    + ILWD is attached to GPIO_B0_03, which is also attached to an LED
      on the Teensy 4.1 board.  That was probably not a good choice.

I tested the Ethernet using an example sketch
(File->Examples->Examples for Teensy
4.1->NativeEthernet->TelnetClient) and it seems to be working
perfectly.

I tested the SD card and it works correctly using another example
sketch (File->Examples->Examples for Teensy
4.1->SD->listfiles).

I tested the RTC clock and it works but it loses its settings when the
power is removed, even though I have a CR2032 battery in the clip (File->Examples->Examples for Teensy
4.1->Time->TimeRTCSet).


June 6, 2022
------------

I got an initial sketch built which toggles all of the GPIOs.
Everything works!

Sadly, the board gets quite warm and the voltages I see are not
terribly good.

I removed the termination and the voltages look terrific.

My calculation is:

Current consumption with all group A signals floating (termination
only on inputs) and JP1 with no jumper:
    = 24 * (5V/(220Ohm + 330Ohm) = 218 mA

So the big question is: why did the Arduino Mega 2560 not have this
problem?

I connected a USB current monitor and found that the Arduino Mega 2560
stayed pretty much below 200 mA, whereas the Teensy 4.1 goes way above
that.

I put in the 'testread' command and tried it out.  As soon as I attach
it to the tape drive I see weird things: when the Teensy 4.1 is
completely unpowered the LED lights up; there is parasitic power flow
back through the level shifters/port expander.  Yuck.

But when I connect to the "serial" port I get the "PERTEXUS>" prompt
and the device immediately detaches.

Current consumption
    Teensy 4.1, free, running command loop          100 mA
    Teensy 4.1, attached to bdb004 with no
         terminators, no connection to tape drive   about 250 mA
                                                    (peaking at 270
                                                    mA)
    Teensy 4.1, attached to bdb004 with all GPIOs
         as inputs (gpio -forcein)                  250 mA
    Teensy 4.1, attached to bdb004 with all GPIOs
         as outputs (gpio -forceout, no terminator,
         no tape drive)                             110 mA
    Teensy 4.1, attached to bdb004 with
        input terminators                           480 mA
    Teensy 4.1, attached to bdb004 with
        input terminators, all GPIOs outputs
        (gpio -forceout)                            640 mA
    Teensy 4.1, attached to bdb004 with
        input terminators, attached to
        unpowered tape drive                        420 mA
    Teensy 4.1, attached to bdb004 with
        input terminators, attached to
        powered tape drive                          410 mA
        but the USB connection disconnects

I'm wondering if the inputs are flapping and that's why I'm burning
power.  Ugh.  I should have put weak pullups on all of the signals.

Let's see: running the input pullups, will take 32 *
5V/(220Ohm+330Ohm) = 290 mA.  Let's also assume that the level
shifters have some non-infinite input resistance, so that could
account for the additional current.

Switching everything to outputs drives burns 8*5V/(220Ohm + 330Ohm) +
24 * 5V/(330Ohm) = 436 mA

When I power up the tape drive I see the USB current consumption spike
well above 1 A.  It's definitely pulling the voltage down.

If I reset the firmware I am able to reconnect but as soon as I get
the prompt it pukes.

Maybe there's a way to sequence the power of up the devices to avoid
the current rush.

Interesting -- I removed the call to gpios_init() from setup() and I
can turn the drive's power on without problem.



June 7, 2022
------------

I've narrowed the fault down to the point at which we turn on the
"GROUPB0" traditional GPIO outputs:

        /* Initialize outputs */
        for (idx = 0; idx < NELEM(gpinfos); idx++) {
            if (gpinfos[idx].group == GROUPB0) {
                digitalWrite(gpinfos[idx].pinnum, HIGH);
                pinMode(gpinfos[idx].pinnum, OUTPUT);
            }
        }

If I ifdef out that section of code in gpios_init() it runs to
completion without causing the part to reset.

I tried putting in a full second of delay between setting DIRA, DIRB,
and OEA and enabling the outputs but that still doesn't do it.

Very strange.  I set all the outputs to inputs and enabled the weak
pullups, which I assume will drive the level shifters inputs high, but
that doesn't cause an overdraw.  It's as I initialize the Group B0
outputs (and set them either high or low -- it doesn't really matter)
that the current consumption crawls way up.  It's almost as if the
current being drawn isn't at the level shifter but actually at the
CPU.  Do I have the DIR or OE sense backwards?

---

I figured it out.  Strangely, you can't do this:

    digitalWrite(GP_PINNUM(GP_DIRA), LOW);      /* "B to A" (inputs) */
    digitalWrite(GP_PINNUM(GP_DIRB), HIGH);     /* "A to B" (outputs) */
    digitalWrite(GP_PINNUM(GP_OEA), LOW);       /* enable */
    pinMode(GP_PINNUM(GP_DIRA), OUTPUT);
    pinMode(GP_PINNUM(GP_DIRB), OUTPUT);
    pinMode(GP_PINNUM(GP_OEA), OUTPUT);

You must do this:

    pinMode(GP_PINNUM(GP_DIRA), OUTPUT);
    pinMode(GP_PINNUM(GP_DIRB), OUTPUT);
    pinMode(GP_PINNUM(GP_OEA), OUTPUT);
    digitalWrite(GP_PINNUM(GP_DIRA), LOW);      /* "B to A" (inputs) */
    digitalWrite(GP_PINNUM(GP_DIRB), HIGH);     /* "A to B" (outputs) */
    digitalWrite(GP_PINNUM(GP_OEA), LOW);       /* enable */

What was happening was that I was configuring the group B level
shifters as outputs but, because I had the above order backwards, they
were staying configured as inputs.  This meant that the level shifter
was driving the signal and then I came along and started driving the
signal, too.  This burned up much power and caused the thing to reset.

The problems I'm having now are:
    + the GPIO numbering doesn't seem correct (e.g., IGO, which is
      Arduino pin 6, appears to be in the GPIO7 register set, not
      GPIO2 as I was expecting)

      I see what's going on:  p. 945 of ref[3]:
      "Regular GPIO and high speed GPIO are paired (GPIO1 and GPIO6
      share the same pins, GPIO2 and GPIO7 share, etc). The
      IOMUXC_GPR_GPR26-29 registers are used to determine if the
      regular or high-speed GPIO module is used for the GPIO pins on a
      given port"

      So I guess we're in "high speed" mode.

    + The lines all go low on initialization.  This causes the drive
      to unload, which is really annoying.



----

I seem to have been able to get around these problems and I'm reading
and writing tapes now (though I have yet to actually check the data)!

I found a bug in the breakTime() function, as distributed in
c:\Program Files (x86)\Arduino\hardware\teensy\avr\cores\teensy4\Time.cpp
as part of Teensduino 1.56.

Here is a sample function that shows the problem:

    static void
    show_time_bug(const DateTimeFields &origtm)
    {
        DateTimeFields      newtm;
        time_t              asint;

        asint = makeTime(origtm);
        breakTime(asint, newtm);

        Serial.print("Date was ");
        Serial.print(origtm.year + 1900);
        Serial.print('/');
        Serial.print(origtm.mon+1);
        Serial.print('/');
        Serial.print(origtm.mday);

        Serial.print(" and is now ");
        Serial.print(newtm.year + 1900);
        Serial.print('/');
        Serial.print(newtm.mon+1);
        Serial.print('/');
        Serial.println(newtm.mday);
    }

...

        show_time_bug({.sec = 0, .min = 0, .hour = 0,
                    .wday = 7 /* Purposefully invalid */,
                    .mday = 28, .mon = 1 /* February */,
                    .year = (2022 - 1900) });
        show_time_bug({.sec = 0, .min = 0, .hour = 0,
                    .wday = 7 /* Purposefully invalid */,
                    .mday = 28, .mon = 1 /* February */,
                    .year = (2020 - 1900) });

        show_time_bug({.sec = 0, .min = 0, .hour = 0,
                    .wday = 7 /* Purposefully invalid */,
                    .mday = 29, .mon = 1 /* February */,
                    .year = (2022 - 1900) });
        show_time_bug({.sec = 0, .min = 0, .hour = 0,
                    .wday = 7 /* Purposefully invalid */,
                    .mday = 29, .mon = 1 /* February */,
                    .year = (2020 - 1900) });

        show_time_bug({.sec = 0, .min = 0, .hour = 0,
                    .wday = 7 /* Purposefully invalid */,
                    .mday = 1, .mon = 2 /* March */,
                    .year = (2022 - 1900) });
        show_time_bug({.sec = 0, .min = 0, .hour = 0,
                    .wday = 7 /* Purposefully invalid */,
                    .mday = 1, .mon = 2 /* March */,
                    .year = (2020 - 1900) });

        show_time_bug({.sec = 0, .min = 0, .hour = 0,
                    .wday = 7 /* Purposefully invalid */,
                    .mday = 2, .mon = 2 /* March */,
                    .year = (2022 - 1900) });
        show_time_bug({.sec = 0, .min = 0, .hour = 0,
                    .wday = 7 /* Purposefully invalid */,
                    .mday = 2, .mon = 2 /* March */,
                    .year = (2020 - 1900) });

Results in:
    Date was 2022/2/28 and is now 2022/2/28
    Date was 2020/2/28 and is now 2020/2/28
    Date was 2022/2/29 and is now 2022/3/1
    Date was 2020/2/29 and is now 2020/2/29
    Date was 2022/3/1 and is now 2022/3/2
    Date was 2020/3/1 and is now 2020/2/29
    Date was 2022/3/2 and is now 2022/3/3
    Date was 2020/3/2 and is now 2020/3/1

The bug in makeTime() will create an incorrect value for dates after
the end of February if one of {year, year + 70} is a leap year but the
other is not.

I sent an email to Paul at pjrc.com and I've fixed it locally.

June 8, 2022
------------

I thought I'd get brave and try to re-read TAPE7.

I got a lot further this time:

    PERTEXUS> stats
    intcounts.icer = 0
    intcounts.iher = 0
    intcounts.iwstr = 0
    intcounts.irstr = 0
    intcounts.idby = 0
    intcounts.ifmk = 0
    PERTEXUS> read tape7r5.tap
    Terminating due to overrun
    opstate = 0
    fmcount = 0
    rdrec = 1, wrrec = 2, ISEMPTY = 0, ISFULL = 0
    base = 0x200031B8, rdptr = 0x20003D30, wrptr = 0x20003D2E, FREE = 1, USED = 4094, ISEMPTY = 0, ISFULL = 0
    harderrcount = 0
    recbytes = 2403
    filesdone = 1
    recsdone = 656
    0000 20003D30:   00 4B 49 6D 6F 76 7A 77 6C C1 27 2C 49 0A 4D CA   |.KImovzwl.',I.M.|
    0010 20003D40:   2C 49 2C 49 0A 63 76 74 6C 77 C9 2C 41 27 27 0A   |,I,I.cvtlw.,A''.|
    0020 20003D50:   00 4B 49 63 76 74 43 6C C1 27 2C 49 0A 4D CA 2C   |.KIcvtCl.',I.M.,|
    .
    .
    .

    ....|
    0FE0 20003D10:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   |................|
    0FF0 20003D20:   00 00 00 00 00 00 00 00 00 00 00 00 00 00         |..............  |
    writesize = 1, lastwritesize = 1
    lastfooteroff = 5531016, position = 5537793
    Attempting to truncate file from 62914560 bytes down to 5539488 bytes (nuking 57375072 bytes)...succeeded
    Finalizing file, filesize = 5539488, current position = 5539488, lastfooteroff = 5539488
    Total of 657 records in 1 files
    PERTEXUS> sd dir
    System Volume Information/
      WPSettings.dat                                   12    Apr 11 14:01 2022
      IndexerVolumeGuid                                76    Apr 11 14:01 2022
    BB-3077D-SC_RSX-11M+_V3.0_SRC_1985.tap        9966532    Sep 12 20:17 2012
    TEST1.TAP                                     1017000    Jan  1  1:00 2000
    TAPE4P1.TAP                                    398640    Jan  1  1:00 2000
    TAPE4P2.TAP                                   3222968    Jan  1  1:00 2000
    TAPE4P3.TAP                                    164328    Jan  1  1:00 2000
    TAPE01.TAP                                    1423248    Jan  1  1:00 2000
    TAPE4P4.TAP                                         4    Jan  1  1:00 2000
    TAPE7.TAP                                      483172    Jan  1  1:00 2000
    TAPE7R2.TAP                                    203596    Jan  1  1:00 2000
    TAPE7R3.TAP                                   1447510    Jan  1  1:00 2000
    TAPE7R4.TAP                                   1659046    Jan  1  1:00 2000
    test1x.tap                                    1017004    Jun  7 19:57 2022
    TAPE01R2.TAP                                  1423248    Jan  1  1:00 2000
    tape7r5.tap                                   5539488    Jun  8 18:52 2022
    PERTEXUS> rewind
    PERTEXUS> stats
    intcounts.icer = 0
    intcounts.iher = 76
    intcounts.iwstr = 0
    intcounts.irstr = 5538724
    intcounts.idby = 1318
    intcounts.ifmk = 0
    PERTEXUS> unload

That's 5 MB.  I can't tell where the IHER interrupts came from.

I increased TAPEBUFSIZ from 4096 to 32768 and TAPENRECS from 8 to 16
and was able to read the whole tape:

    PERTEXUS> read tape7r6.tap
    Finalizing file, filesize = 12038458, current position = 12038458, lastfooteroff = 12038458
    Total of 12026939 bytes in 1437 records (149 records with errors) in 4 files
    PERTEXUS> rewind
    PERTEXUS> stats
    intcounts.icer = 0
    intcounts.iher = 149
    intcounts.iwstr = 0
    intcounts.irstr = 12026939
    intcounts.idby = 2882
    intcounts.ifmk = 0
    PERTEXUS> unload
    PERTEXUS> 

I realized I had a bug in my code wherein I was not recording the fact
that a record that was read had an error.  So I fixed that and tried
again:

    PERTEXUS> read tape7r7.tap
    Finalizing file, filesize = 12130894, current position = 12130894, lastfooteroff = 12130894
    Total of 12119381 bytes in 1437 records (3 records with errors) in 4 files
    PERTEXUS> stats
    intcounts.icer = 0
    intcounts.iher = 3
    intcounts.iwstr = 0
    intcounts.irstr = 12119381
    intcounts.idby = 2882
    intcounts.ifmk = 0
    PERTEXUS> rewind
    PERTEXUS> 

Strange that the results should get better after multiple reads.

Let me try one more cleaning of the heads and another read to see if I
can get even better.

    PERTEXUS> read tape7r8.tap
    Finalizing file, filesize = 12130894, current position = 12130894, lastfooteroff = 12130894
    Total of 12119381 bytes in 1437 records (2 records with errors) in 4 files
    PERTEXUS> rewind
[did not clean heads]    
    PERTEXUS> read tape7r9.tap
    Finalizing file, filesize = 12130888, current position = 12130888, lastfooteroff = 12130888
    Total of 12119376 bytes in 1437 records (2 records with errors) in 4 files
    PERTEXUS> rewind
[cleaned heads]
    PERTEXUS> read tape7r10.tap
    Finalizing file, filesize = 12130894, current position = 12130894, lastfooteroff = 12130894
    Total of 12119381 bytes in 1437 records (2 records with errors) in 4 files
    PERTEXUS> unload
    PERTEXUS> 

I went on to try again to read what exists later on on the tape:

    PERTEXUS> read tape7r11.tap
    Finalizing file, filesize = 12130894, current position = 12130894, lastfooteroff = 12130894
    Total of 12119381 bytes in 1437 records (2 records with errors) in 4 files
    PERTEXUS> read tape7p3r1.tap
    Finalizing file, filesize = 741846, current position = 741846, lastfooteroff = 741846
    Total of 729054 bytes in 1342 records (1 records with errors) in 514 files
    PERTEXUS> read tape7p4r1.tap
    Finalizing file, filesize = 7520, current position = 7520, lastfooteroff = 7520
    Total of 7344 bytes in 18 records (0 records with errors) in 8 files
    PERTEXUS> read tape7p5r1.tap
    Finalizing file, filesize = 540, current position = 540, lastfooteroff = 540
    Total of 480 bytes in 6 records (0 records with errors) in 3 files
    PERTEXUS> read tape7p6r1.tap
    Finalizing file, filesize = 540, current position = 540, lastfooteroff = 540
    Total of 480 bytes in 6 records (0 records with errors) in 3 files
    PERTEXUS> read tape7p7r1.tap
    Finalizing file, filesize = 597684, current position = 597684, lastfooteroff = 597684
    Total of 593312 bytes in 494 records (0 records with errors) in 105 files
    PERTEXUS> read tape7p8r1.tap
    Finalizing file, filesize = 540, current position = 540, lastfooteroff = 540
    Total of 480 bytes in 6 records (0 records with errors) in 3 files
    PERTEXUS> read tape7p9r1.tap
    Finalizing file, filesize = 441960, current position = 441960, lastfooteroff = 441960
    Total of 439856 bytes in 253 records (0 records with errors) in 20 files
    PERTEXUS> read tape7p10r1.tap
    Finalizing file, filesize = 4, current position = 4, lastfooteroff = 4
    Total of 0 bytes in 0 records (0 records with errors) in 1 files
    PERTEXUS> read tape7p11r1.tap
    Finalizing file, filesize = 4, current position = 4, lastfooteroff = 4
    Total of 0 bytes in 0 records (0 records with errors) in 1 files
    PERTEXUS> read tape7p12r1.tap
    Finalizing file, filesize = 13733714, current position = 13733714, lastfooteroff = 13733714
    Total of 13707957 bytes in 2393 records (2393 records with errors) in 1308 files
    PERTEXUS> rewind

I had to ^C at the end because I don't have end-of-tape detection (I
should add that).

June 9, 2022
------------

Some TODOs:
    + Break out read and write FSM to separate classes
    + Add sensitivity to EOT to 'read' command [done 6/9/2022]
    + Add pullup resistors to DIRA, DIRB and OEA to try to avoid all
      glitching (test by resetting board while attached to the drive)
    + Add debug GPIO lines to measure interrupt latency/processing
      time
    + Add '-reverse' functionality to read command to allow backward
      reading [done 6/10/2022]
    + For read command: record corrected error counts

June 11, 2022
-------------

I put pullups onto OEA and DIRB but I still see problems.

The test case:
    + power on the board
    + power on the tape drive
    + load a tape
    + power off the board

Looking at the signals I see the problem.  Powering the board off just
causes all the control signals to drop.

So what I'll try is to deselect the drive when we're not running a
command.

Just a note: the NOP command isn't really a NOP.  It's only a NOP if
the file protect is not activated.  If the tape is file-protected it
will cause a write error.  Grr...

June 12, 2022
-------------

TODOs, updated:
    + Break out read and write FSM to separate classes
    + Add debug GPIO lines to measure interrupt latency/processing
      time
    + For read command: record corrected error counts
    + For read command: add functionality that does a reverse read
      immediately after seeing bad data (read retries)
    + ECO: swap ILDP (on port expander) with IOFL or IREW.  This would
      allow easy use of ILDP interrupts.  The general philosophy:
      remove inputs from the port expander and replace them with
      outputs.
    + Figure out parasitic power.  Test case:
        + board is off but connected to drive
        + power on drive and load tape
        + tape will immediately start to unload
        + try same experiment but without board attached; tape will
          load normally
      We're doing something with the command lines that is causing the
      drive to react.
      Possibly 

Experiments.

Without power:

    Teensy 4.1  J1  J2  Terminators     Drive loads?
    Out         In  Out In              Okay
    Out         In  In  In              Okay
    In          In  In  In              Loads and then unloads
    In          In  In  Out             Okay
    
So it's the presence of the teensy that is causing a problem.

I guess that can only be if the Teensy is somehow being back-powered
because otherwise its pins should appear to be floating (right)?

I'm measuring the "Vin" pin on the Teensy and it's at 0.721 V.  The
3.3V rail is 0.024 V.

    R1      R2      R3      R4      Vin
    In      In      In      In      0.721V
    In      In      In      Out     0.927V
    Out     In      In      Out     1.275V
    Out     Out     In      Out     2.226V
    Out     Out     Out     Out     2.261V

If I remove the Teensy the voltage drops to ~0.8V .

Checking all signal voltages with terminators removed, Teensy in
place, and the drive powered up (but not loaded):

    Signals above 1V:
    
    RN2:9 (IFPT) is at 3.6V
    RN3:5 (ISPEED) is at 3.6V
    RN3:6 (ICER) is at 1.4V
    RN3:7 (IONL) is at 3.6V
    
    
    
